#!/usr/bin/env bash
#SETUP: Linux Mint 21.2
#20231203_13:48_est--EJR
shopt -s dotglob
jumpto() { local t1=$1; local t2=$(sed -n "/$t1:/{:a;n;p;ba};" $0 | grep -v ':$'); sleep .1; eval "$t2"; exit; }
jumpto readvars
#### MAIN MENU ################################################################
mma:
  clear
  echo    '------ EJR: MINT SETUP ------'
  echo		'1)  INSTALL *Auto-Pilot*'
  echo		'2)  CONFIG  *Auto-Pilot*'
  echo		'3)  ITEMS MENU'
  echo    '\ - EXIT'
  read -rsn1 inkey; echo; inkey=${inkey,,}
  clear
  case "$inkey" in
    '1') sanity && Installer  ;;
    '2') sanity && Configer   ;;
    '3') jumpto mma1          ;;
    '\') exit 0               ;;
      *) jumpto mma           ;;
  esac
  zzff
jumpto mma
#### SUB MENU #################################################################
mma1:
  clear
  echo    '------ ITEMS ------'
  echo		'1)  APT UPDATE'
  echo		'2)  APT UNINSTALLS'
  echo		'3)  APT UPGRADE'
  echo		'4)  APT INSTALL'
  echo		'5)  CUBIC'
  echo		'6)  VIDCUTTER'
  echo		'7)  CHROME'
  echo		'8)  FPK LIST'
  echo		'9)  FIX PDF'
  echo		'0)  WALLPAPER BLACK'
  echo		'-)  APT UPGRADE_CLEAN'
  echo		'Q)  UNLOCK PERSONAL'
  echo		'W)  PYTHON STUFF'
  echo		'E)  CONFIG DCONF'
  echo		'R)  CONFIG FILES'
  echo		'T)  NEMO BOOKMARKS'
  echo		'Y)  Set Gsettings'
  echo		'U)  RESET CINNAMON'
  echo		'I)  FIX RESOLUTION 1366x768'
  echo    '\ - EXIT'
  read -rsn1 inkey; echo; inkey=${inkey,,}
  clear
  case "$inkey" in
    '1') AptUpdate      ;;
    '2') UnListAPT      ;;
    '3') AptUpgrade     ;;
    '4') InListAPT      ;;
    '5') InCubicPPA     ;;
    '6') InVidcutterPPA ;;
    '7') InChromePPA    ;;
    '8') InListFPK      ;;
    '9') FixPDF         ;;
    '0') BlackBg        ;;
    '-') AptUpClean     ;;
    'q') ConfUnlock     ;;
    'w') ConfPython     ;;
    'e') ConfDconf      ;;
    'r') ConfFiles      ;;
    't') ConfNemoBooks  ;;
    'y') ConfGsettings  ;;
    'u') ConfCinnReset  ;;
    'i') ConfDiplayRez  ;;
    '\') jumpto mma     ;;
      *) jumpto mma1    ;;
  esac
  zzff
jumpto mma1
###############################################################################

## READING VAR AND FUNC #######################################################
readvars:
  ### GENERIC #########################
  sanity()            { local san; read -p 'Are You Sure? (y/n)' san; san=${san,,}; if [ "$san" != "y" ]; then return 1; else return 0; fi; }
  crap()              { read -n 1 -p '*ANY-KEY*'; echo; }
  zzdd()              { local t1="*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*"; echo -e "$t1\n$t1\n$1\n$t1\n$t1\n"; sleep .5; }
  zzff()              { zzdd '==== FINISHED ===='; }
  ### JOINED FUNCTIONS ################
  Configer()          { ConfUnlock; ConfPython; ConfDconf; ConfFiles; ConfNemoBooks; ConfGsettings; BlackBg; ConfDiplayRez; }
  Installer()         { AptUpdate; UnListAPT; AptUpgrade; InListAPT; InChromePPA; InCubicPPA; InVidcutterPPA; InListFPK; FixPDF; Fblkbg; AptUpClean; }
  ### CUBIC INSTALLS SECTIONS *********
  AptUpdate()         { zzdd '==== UPDATING APT ===='; sudo apt update -y; }
  UnListAPT()         { zzdd '==== UNINSTALLS ===='; for i in ${ListAptUn[@]}; do zzdd "Uninstalling (via AptUn list)  $i"; sudo apt purge --auto-remove -y "$i"; done; }
  AptUpgrade()        { zzdd '==== UPGRADE ===='; sudo apt update -y; sudo apt upgrade -y; }
  InListAPT()         { zzdd '==== INSTALLS ===='; for i in ${ListAptIn[@]}; do zzdd "Installing (via AptIn list)  $i"; sudo apt install -y "$i"; done; }
  InChromePPA()       { zzdd '==== CHROME ===='; zname='Chrome'; ztf="/tmp/this.deb"; zurl='https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'; rm $ztf; wget -O "$ztf" "$zurl"; sudo gdebi "$ztf" --n; rm $ztf; }
  InCubicPPA()        { zzdd '==== CUBIC ===='; zname='cubic'; zppa='ppa:cubic-wizard/release'; sudo apt-add-repository -y "$zppa"; sudo apt update -y; sudo apt install -y "$zname"; }
  InVidcutterPPA()    { zzdd '==== VIDCUTTER ===='; zname='vidcutter'; zppa='ppa:ozmartian/apps'; sudo apt-add-repository -y "$zppa"; sudo apt update -y; sudo apt install -y "$zname"; }
  InListFPK()         { zzdd '==== FLATPAKS ===='; for i in ${ListFpkIn[@]}; do zzdd "Installing(via FPK list)  $i"; sudo flatpak install -y flathub "$i"; done; }
  FixPDF()            { zzdd '==== FIXING PDF ISSUE ===='; sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml; }
  BlackBg()           { zzdd '==== SET BLACK WALLPAPER ===='; local t1="/usr/share/backgrounds/linuxmint/sele_ring.jpg"; convert "$t1" -fill black -colorize 100% "$t1"; }
  AptUpClean()        { zzdd '==== UPGRADE & CLEAN===='; sudo apt update -y; sudo apt upgrade -y; sudo apt autoremove -y; sudo apt autoclean -y; }
  ### Options ###
  InChromiumFPK()     { zzdd '==== FLATPAK: Chromium ===='; sudo flatpak install -y flathub "org.chromium.Chromium"; }
  InDeskfilemakeFPK() { zzdd '==== FLATPAK: Desktop File Maker ===='; sudo flatpak install -y flathub io.github.andreibachim.shortcut; }
  InFlatsealFPK()     { zzdd '==== FLATPAK: FlatSeal ===='; sudo flatpak install -y flathub com.github.tchx84.Flatseal; }
  InLetterpressFPK()  { zzdd '==== FLATPAK: Desktop File Maker ===='; sudo flatpak install -y flathub io.gitlab.gregorni.Letterpress; }
  ### AFTER INSTALLS SECTIONS *********
  ConfUnlock()        { zzdd '==== PERSONAL FILES UNLOCK ===='; cd ~/a-me/; 7z x z-personal.7z; rm z-personal.7z; cd -; }
  ConfPython()        { zzdd '==== PYTHON STUFF ===='; pip3 install --upgrade yt-dlp; pip3 install mnemonic ecdsa pycryptodome pyperclip qrcode base58; }
  ConfDconf()         { zzdd '==== SYSTEM SETTINGS: DCONF ===='
                        dconf write /org/cinnamon/panels-enabled "['1:0:bottom']"
                        dconf write /org/cinnamon/panels-height "['1:27']"
                        dconf write /org/cinnamon/panel-zone-icon-sizes '[{"left":0,"center":0,"right":0,"panelId":1}]'
                        dconf write /org/cinnamon/enabled-applets \
                        "[
                            'panel1:left:0:menu@cinnamon.org',
                            'panel1:left:1:panel-launchers@cinnamon.org',
                            'panel1:left:2:window-list@cinnamon.org',
                            'panel1:right:0:workspace-switcher@cinnamon.org',
                            'panel1:right:1:systray@cinnamon.org',
                            'panel1:right:2:xapp-status@cinnamon.org',
                            'panel1:right:3:keyboard@cinnamon.org',
                            'panel1:right:4:notifications@cinnamon.org',
                            'panel1:right:5:printers@cinnamon.org',
                            'panel1:right:6:removable-drives@cinnamon.org',
                            'panel1:right:7:user@cinnamon.org',
                            'panel1:right:8:network@cinnamon.org',
                            'panel1:right:9:sound@cinnamon.org',
                            'panel1:right:10:power@cinnamon.org',
                            'panel1:right:11:calendar@cinnamon.org'
                        ]"
  } #............................................................................
  ConfCinnReset()     { cinnamon --replace > /dev/null 2>&1 & disown; sleep 4; }
  ConfFiles()         { zzdd '========== CONFIG FILES ==========='; sleep 2
                        echo '...........VARIABLES PLAIN...............'
                            local tswitcherSF="$HOME/a-me/config/switcher.json"
                            local tlauncherSF="$HOME/a-me/config/launchers.json"
                            local tswitcherDD="$HOME/.config/cinnamon/spices/workspace-switcher@cinnamon.org"
                            local tlauncherDD="$HOME/.config/cinnamon/spices/panel-launchers@cinnamon.org"
                            local tbleachbtP1="/root/.config/bleachbit"
                            local tbleachbtP2="$HOME/.config/bleachbit"
                            local tbleachbtS1="$HOME/a-me/config/root-bleachbit.ini"
                            local tbleachbtS2="$HOME/a-me/config/bleachbit.ini"
                            local tbleachbtD1="/root/.config/bleachbit/bleachbit.ini"
                            local tbleachbtD2="$HOME/.config/bleachbit/bleachbit.ini"

                        echo '......VARIABLES COMPUTED & CHECKED ......'
                            local tswitcherDF=$(find "$tswitcherDD" -type f -name '*.json'); wait $!
                              if [ -z "$tswitcherDF" ]; then echo 'NO FILE'; return 1; elif [ $(echo "$tswitcherDF" | wc -l) -gt 1 ]; then echo '2+ FILES'; return 1; fi
                            local tlauncherDF=$(find "$tlauncherDD" -type f -name '*.json'); wait $!
                              if [ -z "$tlauncherDF" ]; then echo 'NO FILE'; return 1; elif [ $(echo "$tlauncherDF" | wc -l) -gt 1 ]; then echo '2+ FILES'; return 1; fi
                      ###
                        echo '#### WORKSPACE SWITCHER ####'; cp "$tswitcherSF" "$tswitcherDF" && echo '!! Panel Switcher Updated !!'
                        echo '#### PANEL LAUNCHERS ####'; cp "$tlauncherSF" "$tlauncherDF" && echo '!! Panel Launcher Updated !!'
                        echo '#### BLEACHBIT ####'; { sudo mkdir -p "$tbleachbtP1"; mkdir -p "$tbleachbtP2"; sudo cp "$tbleachbtS1" "$tbleachbtD1"; cp "$tbleachbtS2" "$tbleachbtD2"; } && echo '!! BleachBit UpDated !!'
  } #............................................................................
  ConfNemoBooks()     { zzdd 'LOADING BOOKMARKS FOR NEMO'; local t1="$HOME/.config/gtk-3.0/bookmarks"; local t2="$HOME/a-me/config/bookmark.txt"; sed "s/\$USER/$(whoami)/g" "$t2" > "$t1"
  } #............................................................................

  ConfGsettings()     { zzff '=== GSETTINGS ==='
                        local t1
                        local t2
                        local LGS
                        local LGG
                        local LGR
                        local LD='>/dev/null'
                        for t1 in "${!Gset_Array[@]}"; do
                          t2="${Gset_Array[$t1]}"
                          LGS="gsettings set $t1 \"$t2\" $LD"
                          LGG="gsettings get $t1"
                          LGR="gsettings range $t1"
                          echo -e "\e[36m\e[1m===========================================================\e[0m"
                          echo -e "\e[4m# Command To Run:\e[0m\e[3m"
                          echo "$LGS"
                          echo -e "\e[0m\e[4m# Current Settings:\e[0m\e[3m"
                          eval "$LGG"
                          echo -e "\e[0m\e[4m# Possible Settings:\e[0m\e[3m"
                          eval "$LGR"
                          echo -e "\e[0m...........................................................\e[33m\e[1m"
                          eval "$LGS"
                          echo -e "\e[0m"
                          sleep .5
                        done
                        echo -e "\e[5m\e[1m**** HIT ENTER ****\e[0m"; read junk
  } #............................................................................
  ConfDiplayRez()     { zzdd 'Resolution For Desktops'
                        local tkey
                        echo -n 'Do You Need 1366x768 Overrides? '; read -rsn1 tkey; echo; tkey=${tkey,,}; [ ! "$tkey" = "y" ] && return
                        echo '---- COPYING FILES FOR RESOLUTION AUTOSTART ----'
                          cp "$HOME/a-me/config/resolution.desktop" "$HOME/.config/autostart/resolution.desktop"
                        echo '---- FIXING RESOLUTION NOW ----'
                          xrandr --newmode "1368x768_60.00" 85.86 1368 1440 1584 1800 768 769 772 795 -HSync +Vsync
                          xrandr --addmode HDMI-1 "1368x768_60.00"
                          xrandr --addmode HDMI-2 "1368x768_60.00"
                          xrandr --output HDMI-1 --mode "1368x768_60.00" --pos 0x0
                          xrandr --output HDMI-2 --mode "1368x768_60.00" --pos 1368x0
  } #............................................................................

  ## vars ###########################################################
  # flatpaks
    ListFpkIn1=(com.github.tchx84.Flatseal); ListFpkIn=("${ListFpkIn1[@]}")
  # apt: install
  # ** Mostly Usefule only if you have an external connection of some kind (ex. Web Lan or Custom Local Data Transfer) **
    ListAptIn1=(arp-scan barrier epiphany-browser httrack links2 minimodem rclone whois yt-dlp)
  # ** Cryptography & Math & Data Representation **
    ListAptIn2=(base58 basez bless dc gnupg hashalot oathtool openssl qrencode ruby-ascii85 tesseract-ocr zbar-tools)
  # ** AV and Images **
    ListAptIn3=(audacity espeak exiftool festival ffmpeg flite gifsicle imagemagick img2pdf jp2a jpegoptim jq mint-meta-codecs pinta pngcrush qmmp shotcut simplescreenrecorder sox speech-dispatcher vainfo webcamoid webp)
  # ** System Tools & Useful For My Scripts **
    ListAptIn4=(bleachbit boxes caca-utils cowsay dialog faketime fastboot fdupes feh figlet python3-pip scrcpy tree whiptail xautomation xbindkeys xclip xdotool yad zenity)
  # ** Document Editors **
    ListAptIn5=(cherrytree ghostwriter pandoc retext xournalpp)
    ListAptIn=("${ListAptIn1[@]}" "${ListAptIn2[@]}" "${ListAptIn3[@]}" "${ListAptIn4[@]}" "${ListAptIn5[@]}")
  # apt: uninstall
    ListAptUn=(drawing firefox* hexchat hexchat-common hypnotix libreoffice* onboard onboard-common pix pix-data pix-debug redshift redshift-gtk rhythmbox* sticky thingy thunderbird* warpinator webapp-manager)
  # Gsettings
    declare -A Gset_Array
  ##### data start #######
    Gset_Array["org.cinnamon.desktop.session idle-delay"]="uint32 0"
    Gset_Array["com.linuxmint.mintmenu.plugins.recent recent-apps-list"]="@as []"
    Gset_Array["io.github.celluloid-player.Celluloid use-skip-buttons-for-playlist"]="true"
    Gset_Array["org.cinnamon desktop-effects-workspace"]="false"
    Gset_Array["org.cinnamon.desktop.interface clock-use-24h"]="false"
    Gset_Array["org.cinnamon.desktop.interface cursor-theme"]="Bibata-Modern-Classic"
    Gset_Array["org.cinnamon.desktop.interface gtk-theme"]="Mint-Y-Dark-Aqua"
    Gset_Array["org.cinnamon.desktop.interface icon-theme"]="Mint-Y-Sand"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys area-screenshot-clip"]="['<Primary>Print']"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys area-screenshot"]="['Print']"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys screensaver"]="['<Primary><Alt><Super>Escape', 'XF86ScreenSaver']"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys screenshot"]="@as []"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys screenshot-clip"]="@as []"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys window-screenshot"]="@as []"
    Gset_Array["org.cinnamon.desktop.keybindings.media-keys window-screenshot-clip"]="@as []"
    Gset_Array["org.cinnamon.desktop.keybindings.wm move-to-monitor-left"]="['<Shift><Super>Left']"
    Gset_Array["org.cinnamon.desktop.keybindings.wm move-to-monitor-right"]="['<Shift><Super>Right']"
    Gset_Array["org.cinnamon.desktop.keybindings.wm move-to-workspace-left"]="['<Shift><Alt>Left']"
    Gset_Array["org.cinnamon.desktop.keybindings.wm move-to-workspace-right"]="['<Shift><Alt>Right']"
    Gset_Array["org.cinnamon.desktop.keybindings.wm toggle-recording"]="@as []"
    Gset_Array["org.cinnamon.desktop.media-handling automount-open"]="false"
    Gset_Array["org.cinnamon.desktop.media-handling automount"]="true"
    Gset_Array["org.cinnamon.desktop.media-handling autorun-never"]="true"
    Gset_Array["org.cinnamon.desktop.peripherals.touchpad send-events"]="disabled-on-external-mouse"
    Gset_Array["org.cinnamon.desktop.privacy remember-recent-files"]="false"
    Gset_Array["org.cinnamon.desktop.privacy remember-recent-files"]="false"
    Gset_Array["org.cinnamon.desktop.screensaver lock-enabled"]="false"
    Gset_Array["org.cinnamon.desktop.wm.preferences action-scroll-titlebar"]="opacity"
    Gset_Array["org.cinnamon favorite-apps"]="['mintinstall.desktop', 'cinnamon-settings.desktop', 'cubic.desktop', 'bleachbit-root.desktop', 'virtualbox.desktop']"
    Gset_Array["org.cinnamon.muffin edge-tiling"]="false"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power button-power"]="blank"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power critical-battery-action"]="shutdown"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power idle-dim-ac"]="false"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power idle-dim-battery"]="false"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power lid-close-ac-action"]="nothing"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power lid-close-battery-action"]="nothing"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power lock-on-suspend"]="false"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power sleep-display-ac"]="1800"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power sleep-display-battery"]="300"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power sleep-inactive-ac-timeout"]="0"
    Gset_Array["org.cinnamon.settings-daemon.plugins.power sleep-inactive-battery-timeout"]="0"
    Gset_Array["org.cinnamon.theme name"]="Mint-Y-Dark-Aqua"
    Gset_Array["org.cinnamon workspace-osd-visible"]="false"
    Gset_Array["org.gnome.desktop.interface clock-format"]="12h"
    Gset_Array["org.gnome.desktop.privacy remember-recent-files"]="false"
    Gset_Array["org.gtk.Settings.FileChooser show-hidden"]="true"
    Gset_Array["org.nemo.desktop computer-icon-visible"]="false"
    Gset_Array["org.nemo.desktop home-icon-visible"]="false"
    Gset_Array["org.nemo.desktop network-icon-visible"]="false"
    Gset_Array["org.nemo.desktop trash-icon-visible"]="false"
    Gset_Array["org.nemo.desktop volumes-visible"]="false"
    Gset_Array["org.nemo.preferences detect-content"]="false"
    Gset_Array["org.nemo.preferences enable-delete"]="true"
    Gset_Array["org.nemo.preferences show-hidden-files"]="true"
    Gset_Array["org.x.apps.portal color-scheme"]="prefer-dark"
    Gset_Array["org.x.editor.plugins active-plugins"]="['time', 'sort', 'filebrowser', 'textsize', 'trailsave', 'modelines', 'docinfo', 'open-uri-context-menu', 'spell', 'joinlines']"
    Gset_Array["org.x.editor.plugins.time custom-format"]='#%Y%m%d_%H:%M_est--EJR'
    Gset_Array["org.x.editor.plugins.time prompt-type"]="prompt-custom-format"
    Gset_Array["org.x.editor.preferences.editor draw-whitespace-trailing"]="true"
    Gset_Array["org.x.editor.preferences.editor draw-whitespace"]="true"
    Gset_Array["org.x.editor.preferences.editor ensure-trailing-newline"]="false"
    Gset_Array["org.x.editor.preferences.editor insert-spaces"]="true"
    Gset_Array["org.x.editor.preferences.editor scheme"]="cobalt"
    Gset_Array["org.x.editor.preferences.editor tabs-size"]="2"
    Gset_Array["org.x.editor.preferences.editor wrap-mode"]="none"
  ##### data end #########

jumpto mma
##########################################################